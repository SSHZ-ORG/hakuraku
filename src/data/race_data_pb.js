// source: race_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.hakuraku.RaceSimulateData', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateData.EventDataWrapper', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateEventData', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateEventData.SimulateEventType', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateFrameData', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateHeaderData', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateHorseFrameData', null, global);
goog.exportSymbol('proto.hakuraku.RaceSimulateHorseResultData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.RaceSimulateData.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.RaceSimulateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateData.displayName = 'proto.hakuraku.RaceSimulateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.RaceSimulateData.EventDataWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateData.EventDataWrapper.displayName = 'proto.hakuraku.RaceSimulateData.EventDataWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateHeaderData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.RaceSimulateHeaderData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateHeaderData.displayName = 'proto.hakuraku.RaceSimulateHeaderData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateFrameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.RaceSimulateFrameData.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.RaceSimulateFrameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateFrameData.displayName = 'proto.hakuraku.RaceSimulateFrameData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateHorseFrameData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.RaceSimulateHorseFrameData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateHorseFrameData.displayName = 'proto.hakuraku.RaceSimulateHorseFrameData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateHorseResultData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.RaceSimulateHorseResultData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateHorseResultData.displayName = 'proto.hakuraku.RaceSimulateHorseResultData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceSimulateEventData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.RaceSimulateEventData.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.RaceSimulateEventData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceSimulateEventData.displayName = 'proto.hakuraku.RaceSimulateEventData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.RaceSimulateData.repeatedFields_ = [9,11,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.hakuraku.RaceSimulateHeaderData.toObject(includeInstance, f),
    distanceDiffMax: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    horseNum: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    horseFrameSize: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    horseResultSize: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    paddingSize1: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    frameCount: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    frameSize: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    frameList: jspb.Message.toObjectList(msg.getFrameList(),
    proto.hakuraku.RaceSimulateFrameData.toObject, includeInstance),
    paddingSize2: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    horseResultList: jspb.Message.toObjectList(msg.getHorseResultList(),
    proto.hakuraku.RaceSimulateHorseResultData.toObject, includeInstance),
    paddingSize3: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    eventCount: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    eventList: jspb.Message.toObjectList(msg.getEventList(),
    proto.hakuraku.RaceSimulateData.EventDataWrapper.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateData}
 */
proto.hakuraku.RaceSimulateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateData;
  return proto.hakuraku.RaceSimulateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateData}
 */
proto.hakuraku.RaceSimulateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hakuraku.RaceSimulateHeaderData;
      reader.readMessage(value,proto.hakuraku.RaceSimulateHeaderData.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistanceDiffMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHorseNum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHorseFrameSize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHorseResultSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaddingSize1(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameCount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrameSize(value);
      break;
    case 9:
      var value = new proto.hakuraku.RaceSimulateFrameData;
      reader.readMessage(value,proto.hakuraku.RaceSimulateFrameData.deserializeBinaryFromReader);
      msg.addFrame(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaddingSize2(value);
      break;
    case 11:
      var value = new proto.hakuraku.RaceSimulateHorseResultData;
      reader.readMessage(value,proto.hakuraku.RaceSimulateHorseResultData.deserializeBinaryFromReader);
      msg.addHorseResult(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPaddingSize3(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventCount(value);
      break;
    case 14:
      var value = new proto.hakuraku.RaceSimulateData.EventDataWrapper;
      reader.readMessage(value,proto.hakuraku.RaceSimulateData.EventDataWrapper.deserializeBinaryFromReader);
      msg.addEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hakuraku.RaceSimulateHeaderData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getFrameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.hakuraku.RaceSimulateFrameData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getHorseResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.hakuraku.RaceSimulateHorseResultData.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getEventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.hakuraku.RaceSimulateData.EventDataWrapper.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateData.EventDataWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateData.EventDataWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    event: (f = msg.getEvent()) && proto.hakuraku.RaceSimulateEventData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateData.EventDataWrapper;
  return proto.hakuraku.RaceSimulateData.EventDataWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateData.EventDataWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventSize(value);
      break;
    case 2:
      var value = new proto.hakuraku.RaceSimulateEventData;
      reader.readMessage(value,proto.hakuraku.RaceSimulateEventData.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateData.EventDataWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateData.EventDataWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hakuraku.RaceSimulateEventData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 event_size = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.getEventSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper} returns this
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.setEventSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper} returns this
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.clearEventSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.hasEventSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RaceSimulateEventData event = 2;
 * @return {?proto.hakuraku.RaceSimulateEventData}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.getEvent = function() {
  return /** @type{?proto.hakuraku.RaceSimulateEventData} */ (
    jspb.Message.getWrapperField(this, proto.hakuraku.RaceSimulateEventData, 2));
};


/**
 * @param {?proto.hakuraku.RaceSimulateEventData|undefined} value
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper} returns this
*/
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.setEvent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper} returns this
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.clearEvent = function() {
  return this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.EventDataWrapper.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RaceSimulateHeaderData header = 1;
 * @return {?proto.hakuraku.RaceSimulateHeaderData}
 */
proto.hakuraku.RaceSimulateData.prototype.getHeader = function() {
  return /** @type{?proto.hakuraku.RaceSimulateHeaderData} */ (
    jspb.Message.getWrapperField(this, proto.hakuraku.RaceSimulateHeaderData, 1));
};


/**
 * @param {?proto.hakuraku.RaceSimulateHeaderData|undefined} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
*/
proto.hakuraku.RaceSimulateData.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float distance_diff_max = 2;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getDistanceDiffMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setDistanceDiffMax = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearDistanceDiffMax = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasDistanceDiffMax = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 horse_num = 3;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getHorseNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setHorseNum = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearHorseNum = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasHorseNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 horse_frame_size = 4;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getHorseFrameSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setHorseFrameSize = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearHorseFrameSize = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasHorseFrameSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 horse_result_size = 5;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getHorseResultSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setHorseResultSize = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearHorseResultSize = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasHorseResultSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 __padding_size_1 = 6;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getPaddingSize1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setPaddingSize1 = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearPaddingSize1 = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasPaddingSize1 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 frame_count = 7;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getFrameCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setFrameCount = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearFrameCount = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasFrameCount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 frame_size = 8;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getFrameSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setFrameSize = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearFrameSize = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasFrameSize = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated RaceSimulateFrameData frame = 9;
 * @return {!Array<!proto.hakuraku.RaceSimulateFrameData>}
 */
proto.hakuraku.RaceSimulateData.prototype.getFrameList = function() {
  return /** @type{!Array<!proto.hakuraku.RaceSimulateFrameData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.RaceSimulateFrameData, 9));
};


/**
 * @param {!Array<!proto.hakuraku.RaceSimulateFrameData>} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
*/
proto.hakuraku.RaceSimulateData.prototype.setFrameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.hakuraku.RaceSimulateFrameData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceSimulateFrameData}
 */
proto.hakuraku.RaceSimulateData.prototype.addFrame = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.hakuraku.RaceSimulateFrameData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearFrameList = function() {
  return this.setFrameList([]);
};


/**
 * optional int32 __padding_size_2 = 10;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getPaddingSize2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setPaddingSize2 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearPaddingSize2 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasPaddingSize2 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated RaceSimulateHorseResultData horse_result = 11;
 * @return {!Array<!proto.hakuraku.RaceSimulateHorseResultData>}
 */
proto.hakuraku.RaceSimulateData.prototype.getHorseResultList = function() {
  return /** @type{!Array<!proto.hakuraku.RaceSimulateHorseResultData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.RaceSimulateHorseResultData, 11));
};


/**
 * @param {!Array<!proto.hakuraku.RaceSimulateHorseResultData>} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
*/
proto.hakuraku.RaceSimulateData.prototype.setHorseResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.hakuraku.RaceSimulateHorseResultData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceSimulateHorseResultData}
 */
proto.hakuraku.RaceSimulateData.prototype.addHorseResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.hakuraku.RaceSimulateHorseResultData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearHorseResultList = function() {
  return this.setHorseResultList([]);
};


/**
 * optional int32 __padding_size_3 = 12;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getPaddingSize3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setPaddingSize3 = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearPaddingSize3 = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasPaddingSize3 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 event_count = 13;
 * @return {number}
 */
proto.hakuraku.RaceSimulateData.prototype.getEventCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.setEventCount = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearEventCount = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateData.prototype.hasEventCount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated EventDataWrapper event = 14;
 * @return {!Array<!proto.hakuraku.RaceSimulateData.EventDataWrapper>}
 */
proto.hakuraku.RaceSimulateData.prototype.getEventList = function() {
  return /** @type{!Array<!proto.hakuraku.RaceSimulateData.EventDataWrapper>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.RaceSimulateData.EventDataWrapper, 14));
};


/**
 * @param {!Array<!proto.hakuraku.RaceSimulateData.EventDataWrapper>} value
 * @return {!proto.hakuraku.RaceSimulateData} returns this
*/
proto.hakuraku.RaceSimulateData.prototype.setEventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.hakuraku.RaceSimulateData.EventDataWrapper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceSimulateData.EventDataWrapper}
 */
proto.hakuraku.RaceSimulateData.prototype.addEvent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.hakuraku.RaceSimulateData.EventDataWrapper, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.RaceSimulateData} returns this
 */
proto.hakuraku.RaceSimulateData.prototype.clearEventList = function() {
  return this.setEventList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateHeaderData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateHeaderData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHeaderData.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxLength: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    version: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateHeaderData}
 */
proto.hakuraku.RaceSimulateHeaderData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateHeaderData;
  return proto.hakuraku.RaceSimulateHeaderData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateHeaderData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateHeaderData}
 */
proto.hakuraku.RaceSimulateHeaderData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateHeaderData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateHeaderData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHeaderData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 max_length = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.getMaxLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHeaderData} returns this
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.setMaxLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHeaderData} returns this
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.clearMaxLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.hasMaxLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 version = 2;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHeaderData} returns this
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHeaderData} returns this
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHeaderData.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.RaceSimulateFrameData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateFrameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateFrameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateFrameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    horseFrameList: jspb.Message.toObjectList(msg.getHorseFrameList(),
    proto.hakuraku.RaceSimulateHorseFrameData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateFrameData}
 */
proto.hakuraku.RaceSimulateFrameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateFrameData;
  return proto.hakuraku.RaceSimulateFrameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateFrameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateFrameData}
 */
proto.hakuraku.RaceSimulateFrameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTime(value);
      break;
    case 2:
      var value = new proto.hakuraku.RaceSimulateHorseFrameData;
      reader.readMessage(value,proto.hakuraku.RaceSimulateHorseFrameData.deserializeBinaryFromReader);
      msg.addHorseFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateFrameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateFrameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateFrameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getHorseFrameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hakuraku.RaceSimulateHorseFrameData.serializeBinaryToWriter
    );
  }
};


/**
 * optional float time = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateFrameData} returns this
 */
proto.hakuraku.RaceSimulateFrameData.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateFrameData} returns this
 */
proto.hakuraku.RaceSimulateFrameData.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RaceSimulateHorseFrameData horse_frame = 2;
 * @return {!Array<!proto.hakuraku.RaceSimulateHorseFrameData>}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.getHorseFrameList = function() {
  return /** @type{!Array<!proto.hakuraku.RaceSimulateHorseFrameData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.RaceSimulateHorseFrameData, 2));
};


/**
 * @param {!Array<!proto.hakuraku.RaceSimulateHorseFrameData>} value
 * @return {!proto.hakuraku.RaceSimulateFrameData} returns this
*/
proto.hakuraku.RaceSimulateFrameData.prototype.setHorseFrameList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hakuraku.RaceSimulateHorseFrameData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData}
 */
proto.hakuraku.RaceSimulateFrameData.prototype.addHorseFrame = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hakuraku.RaceSimulateHorseFrameData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.RaceSimulateFrameData} returns this
 */
proto.hakuraku.RaceSimulateFrameData.prototype.clearHorseFrameList = function() {
  return this.setHorseFrameList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateHorseFrameData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateHorseFrameData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHorseFrameData.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    lanePosition: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    speed: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    hp: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    temptationMode: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    blockFrontHorseIndex: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData}
 */
proto.hakuraku.RaceSimulateHorseFrameData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateHorseFrameData;
  return proto.hakuraku.RaceSimulateHorseFrameData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateHorseFrameData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData}
 */
proto.hakuraku.RaceSimulateHorseFrameData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLanePosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemptationMode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockFrontHorseIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateHorseFrameData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateHorseFrameData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHorseFrameData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional float distance = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 lane_position = 2;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getLanePosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setLanePosition = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearLanePosition = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasLanePosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 speed = 3;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 hp = 4;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setHp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearHp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasHp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 temptation_mode = 5;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getTemptationMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setTemptationMode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearTemptationMode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasTemptationMode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 block_front_horse_index = 6;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.getBlockFrontHorseIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.setBlockFrontHorseIndex = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseFrameData} returns this
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.clearBlockFrontHorseIndex = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseFrameData.prototype.hasBlockFrontHorseIndex = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateHorseResultData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateHorseResultData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHorseResultData.toObject = function(includeInstance, msg) {
  var f, obj = {
    finishOrder: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    finishTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    finishDiffTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    startDelayTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    gutsOrder: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    wizOrder: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    lastSpurtStartDistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    runningStyle: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    defeat: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    finishTimeRaw: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData}
 */
proto.hakuraku.RaceSimulateHorseResultData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateHorseResultData;
  return proto.hakuraku.RaceSimulateHorseResultData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateHorseResultData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData}
 */
proto.hakuraku.RaceSimulateHorseResultData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFinishOrder(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFinishTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFinishDiffTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartDelayTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGutsOrder(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWizOrder(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLastSpurtStartDistance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRunningStyle(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefeat(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFinishTimeRaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateHorseResultData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateHorseResultData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateHorseResultData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional int32 finish_order = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getFinishOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setFinishOrder = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearFinishOrder = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasFinishOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float finish_time = 2;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getFinishTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setFinishTime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearFinishTime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasFinishTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float finish_diff_time = 3;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getFinishDiffTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setFinishDiffTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearFinishDiffTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasFinishDiffTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float start_delay_time = 4;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getStartDelayTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setStartDelayTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearStartDelayTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasStartDelayTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 guts_order = 5;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getGutsOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setGutsOrder = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearGutsOrder = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasGutsOrder = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 wiz_order = 6;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getWizOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setWizOrder = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearWizOrder = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasWizOrder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float last_spurt_start_distance = 7;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getLastSpurtStartDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setLastSpurtStartDistance = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearLastSpurtStartDistance = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasLastSpurtStartDistance = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 running_style = 8;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getRunningStyle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setRunningStyle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearRunningStyle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasRunningStyle = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 defeat = 9;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getDefeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setDefeat = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearDefeat = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasDefeat = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float finish_time_raw = 10;
 * @return {number}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.getFinishTimeRaw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.setFinishTimeRaw = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateHorseResultData} returns this
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.clearFinishTimeRaw = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateHorseResultData.prototype.hasFinishTimeRaw = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.RaceSimulateEventData.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceSimulateEventData.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceSimulateEventData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceSimulateEventData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateEventData.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    paramCount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    paramList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceSimulateEventData}
 */
proto.hakuraku.RaceSimulateEventData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceSimulateEventData;
  return proto.hakuraku.RaceSimulateEventData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceSimulateEventData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceSimulateEventData}
 */
proto.hakuraku.RaceSimulateEventData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFrameTime(value);
      break;
    case 2:
      var value = /** @type {!proto.hakuraku.RaceSimulateEventData.SimulateEventType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParamCount(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParam(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceSimulateEventData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceSimulateEventData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceSimulateEventData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceSimulateEventData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {!proto.hakuraku.RaceSimulateEventData.SimulateEventType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hakuraku.RaceSimulateEventData.SimulateEventType = {
  SCORE: 0,
  NOUSE_1: 1,
  NOUSE_2: 2,
  SKILL: 3
};

/**
 * optional float frame_time = 1;
 * @return {number}
 */
proto.hakuraku.RaceSimulateEventData.prototype.getFrameTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.setFrameTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.clearFrameTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateEventData.prototype.hasFrameTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SimulateEventType type = 2;
 * @return {!proto.hakuraku.RaceSimulateEventData.SimulateEventType}
 */
proto.hakuraku.RaceSimulateEventData.prototype.getType = function() {
  return /** @type {!proto.hakuraku.RaceSimulateEventData.SimulateEventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.hakuraku.RaceSimulateEventData.SimulateEventType} value
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateEventData.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 param_count = 3;
 * @return {number}
 */
proto.hakuraku.RaceSimulateEventData.prototype.getParamCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.setParamCount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.clearParamCount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceSimulateEventData.prototype.hasParamCount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int32 param = 4;
 * @return {!Array<number>}
 */
proto.hakuraku.RaceSimulateEventData.prototype.getParamList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.setParamList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.addParam = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.RaceSimulateEventData} returns this
 */
proto.hakuraku.RaceSimulateEventData.prototype.clearParamList = function() {
  return this.setParamList([]);
};


goog.object.extend(exports, proto.hakuraku);
