// source: data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.hakuraku.Card', null, global);
goog.exportSymbol('proto.hakuraku.Chara', null, global);
goog.exportSymbol('proto.hakuraku.RaceInstance', null, global);
goog.exportSymbol('proto.hakuraku.RaceInstance.GroundType', null, global);
goog.exportSymbol('proto.hakuraku.Skill', null, global);
goog.exportSymbol('proto.hakuraku.SpecialCaseRace', null, global);
goog.exportSymbol('proto.hakuraku.SpecialCaseRace.RacePermission', null, global);
goog.exportSymbol('proto.hakuraku.Story', null, global);
goog.exportSymbol('proto.hakuraku.SuccessionRelation', null, global);
goog.exportSymbol('proto.hakuraku.SuccessionRelation.Member', null, global);
goog.exportSymbol('proto.hakuraku.SupportCard', null, global);
goog.exportSymbol('proto.hakuraku.TeamStadiumScoreBonus', null, global);
goog.exportSymbol('proto.hakuraku.UMDatabase', null, global);
goog.exportSymbol('proto.hakuraku.WinsSaddle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.UMDatabase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.UMDatabase.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.UMDatabase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.UMDatabase.displayName = 'proto.hakuraku.UMDatabase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.Chara = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.Chara, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.Chara.displayName = 'proto.hakuraku.Chara';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.Card = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.Card, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.Card.displayName = 'proto.hakuraku.Card';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.SupportCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.SupportCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.SupportCard.displayName = 'proto.hakuraku.SupportCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.SuccessionRelation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.SuccessionRelation.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.SuccessionRelation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.SuccessionRelation.displayName = 'proto.hakuraku.SuccessionRelation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.SuccessionRelation.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.SuccessionRelation.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.SuccessionRelation.Member.displayName = 'proto.hakuraku.SuccessionRelation.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.RaceInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.RaceInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.RaceInstance.displayName = 'proto.hakuraku.RaceInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.WinsSaddle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.WinsSaddle.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.WinsSaddle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.WinsSaddle.displayName = 'proto.hakuraku.WinsSaddle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.SpecialCaseRace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.SpecialCaseRace.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.SpecialCaseRace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.SpecialCaseRace.displayName = 'proto.hakuraku.SpecialCaseRace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hakuraku.Skill.repeatedFields_, null);
};
goog.inherits(proto.hakuraku.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.Skill.displayName = 'proto.hakuraku.Skill';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.TeamStadiumScoreBonus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.TeamStadiumScoreBonus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.TeamStadiumScoreBonus.displayName = 'proto.hakuraku.TeamStadiumScoreBonus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hakuraku.Story = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hakuraku.Story, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hakuraku.Story.displayName = 'proto.hakuraku.Story';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.UMDatabase.repeatedFields_ = [2,9,11,3,4,5,6,7,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.UMDatabase.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.UMDatabase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.UMDatabase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.UMDatabase.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    charaList: jspb.Message.toObjectList(msg.getCharaList(),
    proto.hakuraku.Chara.toObject, includeInstance),
    cardList: jspb.Message.toObjectList(msg.getCardList(),
    proto.hakuraku.Card.toObject, includeInstance),
    supportCardList: jspb.Message.toObjectList(msg.getSupportCardList(),
    proto.hakuraku.SupportCard.toObject, includeInstance),
    successionRelationList: jspb.Message.toObjectList(msg.getSuccessionRelationList(),
    proto.hakuraku.SuccessionRelation.toObject, includeInstance),
    raceInstanceList: jspb.Message.toObjectList(msg.getRaceInstanceList(),
    proto.hakuraku.RaceInstance.toObject, includeInstance),
    winsSaddleList: jspb.Message.toObjectList(msg.getWinsSaddleList(),
    proto.hakuraku.WinsSaddle.toObject, includeInstance),
    specialCaseRaceList: jspb.Message.toObjectList(msg.getSpecialCaseRaceList(),
    proto.hakuraku.SpecialCaseRace.toObject, includeInstance),
    skillList: jspb.Message.toObjectList(msg.getSkillList(),
    proto.hakuraku.Skill.toObject, includeInstance),
    teamStadiumScoreBonusList: jspb.Message.toObjectList(msg.getTeamStadiumScoreBonusList(),
    proto.hakuraku.TeamStadiumScoreBonus.toObject, includeInstance),
    storyList: jspb.Message.toObjectList(msg.getStoryList(),
    proto.hakuraku.Story.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.UMDatabase}
 */
proto.hakuraku.UMDatabase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.UMDatabase;
  return proto.hakuraku.UMDatabase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.UMDatabase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.UMDatabase}
 */
proto.hakuraku.UMDatabase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.hakuraku.Chara;
      reader.readMessage(value,proto.hakuraku.Chara.deserializeBinaryFromReader);
      msg.addChara(value);
      break;
    case 9:
      var value = new proto.hakuraku.Card;
      reader.readMessage(value,proto.hakuraku.Card.deserializeBinaryFromReader);
      msg.addCard(value);
      break;
    case 11:
      var value = new proto.hakuraku.SupportCard;
      reader.readMessage(value,proto.hakuraku.SupportCard.deserializeBinaryFromReader);
      msg.addSupportCard(value);
      break;
    case 3:
      var value = new proto.hakuraku.SuccessionRelation;
      reader.readMessage(value,proto.hakuraku.SuccessionRelation.deserializeBinaryFromReader);
      msg.addSuccessionRelation(value);
      break;
    case 4:
      var value = new proto.hakuraku.RaceInstance;
      reader.readMessage(value,proto.hakuraku.RaceInstance.deserializeBinaryFromReader);
      msg.addRaceInstance(value);
      break;
    case 5:
      var value = new proto.hakuraku.WinsSaddle;
      reader.readMessage(value,proto.hakuraku.WinsSaddle.deserializeBinaryFromReader);
      msg.addWinsSaddle(value);
      break;
    case 6:
      var value = new proto.hakuraku.SpecialCaseRace;
      reader.readMessage(value,proto.hakuraku.SpecialCaseRace.deserializeBinaryFromReader);
      msg.addSpecialCaseRace(value);
      break;
    case 7:
      var value = new proto.hakuraku.Skill;
      reader.readMessage(value,proto.hakuraku.Skill.deserializeBinaryFromReader);
      msg.addSkill(value);
      break;
    case 8:
      var value = new proto.hakuraku.TeamStadiumScoreBonus;
      reader.readMessage(value,proto.hakuraku.TeamStadiumScoreBonus.deserializeBinaryFromReader);
      msg.addTeamStadiumScoreBonus(value);
      break;
    case 10:
      var value = new proto.hakuraku.Story;
      reader.readMessage(value,proto.hakuraku.Story.deserializeBinaryFromReader);
      msg.addStory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.UMDatabase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.UMDatabase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.UMDatabase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.UMDatabase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCharaList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.hakuraku.Chara.serializeBinaryToWriter
    );
  }
  f = message.getCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.hakuraku.Card.serializeBinaryToWriter
    );
  }
  f = message.getSupportCardList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.hakuraku.SupportCard.serializeBinaryToWriter
    );
  }
  f = message.getSuccessionRelationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hakuraku.SuccessionRelation.serializeBinaryToWriter
    );
  }
  f = message.getRaceInstanceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.hakuraku.RaceInstance.serializeBinaryToWriter
    );
  }
  f = message.getWinsSaddleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.hakuraku.WinsSaddle.serializeBinaryToWriter
    );
  }
  f = message.getSpecialCaseRaceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.hakuraku.SpecialCaseRace.serializeBinaryToWriter
    );
  }
  f = message.getSkillList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.hakuraku.Skill.serializeBinaryToWriter
    );
  }
  f = message.getTeamStadiumScoreBonusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.hakuraku.TeamStadiumScoreBonus.serializeBinaryToWriter
    );
  }
  f = message.getStoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.hakuraku.Story.serializeBinaryToWriter
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.hakuraku.UMDatabase.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.UMDatabase.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Chara chara = 2;
 * @return {!Array<!proto.hakuraku.Chara>}
 */
proto.hakuraku.UMDatabase.prototype.getCharaList = function() {
  return /** @type{!Array<!proto.hakuraku.Chara>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.Chara, 2));
};


/**
 * @param {!Array<!proto.hakuraku.Chara>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setCharaList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.hakuraku.Chara=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.Chara}
 */
proto.hakuraku.UMDatabase.prototype.addChara = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.hakuraku.Chara, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearCharaList = function() {
  return this.setCharaList([]);
};


/**
 * repeated Card card = 9;
 * @return {!Array<!proto.hakuraku.Card>}
 */
proto.hakuraku.UMDatabase.prototype.getCardList = function() {
  return /** @type{!Array<!proto.hakuraku.Card>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.Card, 9));
};


/**
 * @param {!Array<!proto.hakuraku.Card>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setCardList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.hakuraku.Card=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.Card}
 */
proto.hakuraku.UMDatabase.prototype.addCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.hakuraku.Card, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearCardList = function() {
  return this.setCardList([]);
};


/**
 * repeated SupportCard support_card = 11;
 * @return {!Array<!proto.hakuraku.SupportCard>}
 */
proto.hakuraku.UMDatabase.prototype.getSupportCardList = function() {
  return /** @type{!Array<!proto.hakuraku.SupportCard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.SupportCard, 11));
};


/**
 * @param {!Array<!proto.hakuraku.SupportCard>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setSupportCardList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.hakuraku.SupportCard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.SupportCard}
 */
proto.hakuraku.UMDatabase.prototype.addSupportCard = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.hakuraku.SupportCard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearSupportCardList = function() {
  return this.setSupportCardList([]);
};


/**
 * repeated SuccessionRelation succession_relation = 3;
 * @return {!Array<!proto.hakuraku.SuccessionRelation>}
 */
proto.hakuraku.UMDatabase.prototype.getSuccessionRelationList = function() {
  return /** @type{!Array<!proto.hakuraku.SuccessionRelation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.SuccessionRelation, 3));
};


/**
 * @param {!Array<!proto.hakuraku.SuccessionRelation>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setSuccessionRelationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hakuraku.SuccessionRelation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.SuccessionRelation}
 */
proto.hakuraku.UMDatabase.prototype.addSuccessionRelation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hakuraku.SuccessionRelation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearSuccessionRelationList = function() {
  return this.setSuccessionRelationList([]);
};


/**
 * repeated RaceInstance race_instance = 4;
 * @return {!Array<!proto.hakuraku.RaceInstance>}
 */
proto.hakuraku.UMDatabase.prototype.getRaceInstanceList = function() {
  return /** @type{!Array<!proto.hakuraku.RaceInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.RaceInstance, 4));
};


/**
 * @param {!Array<!proto.hakuraku.RaceInstance>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setRaceInstanceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.hakuraku.RaceInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.RaceInstance}
 */
proto.hakuraku.UMDatabase.prototype.addRaceInstance = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.hakuraku.RaceInstance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearRaceInstanceList = function() {
  return this.setRaceInstanceList([]);
};


/**
 * repeated WinsSaddle wins_saddle = 5;
 * @return {!Array<!proto.hakuraku.WinsSaddle>}
 */
proto.hakuraku.UMDatabase.prototype.getWinsSaddleList = function() {
  return /** @type{!Array<!proto.hakuraku.WinsSaddle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.WinsSaddle, 5));
};


/**
 * @param {!Array<!proto.hakuraku.WinsSaddle>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setWinsSaddleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.hakuraku.WinsSaddle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.WinsSaddle}
 */
proto.hakuraku.UMDatabase.prototype.addWinsSaddle = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.hakuraku.WinsSaddle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearWinsSaddleList = function() {
  return this.setWinsSaddleList([]);
};


/**
 * repeated SpecialCaseRace special_case_race = 6;
 * @return {!Array<!proto.hakuraku.SpecialCaseRace>}
 */
proto.hakuraku.UMDatabase.prototype.getSpecialCaseRaceList = function() {
  return /** @type{!Array<!proto.hakuraku.SpecialCaseRace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.SpecialCaseRace, 6));
};


/**
 * @param {!Array<!proto.hakuraku.SpecialCaseRace>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setSpecialCaseRaceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.hakuraku.SpecialCaseRace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.SpecialCaseRace}
 */
proto.hakuraku.UMDatabase.prototype.addSpecialCaseRace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.hakuraku.SpecialCaseRace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearSpecialCaseRaceList = function() {
  return this.setSpecialCaseRaceList([]);
};


/**
 * repeated Skill skill = 7;
 * @return {!Array<!proto.hakuraku.Skill>}
 */
proto.hakuraku.UMDatabase.prototype.getSkillList = function() {
  return /** @type{!Array<!proto.hakuraku.Skill>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.Skill, 7));
};


/**
 * @param {!Array<!proto.hakuraku.Skill>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setSkillList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.hakuraku.Skill=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.Skill}
 */
proto.hakuraku.UMDatabase.prototype.addSkill = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.hakuraku.Skill, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearSkillList = function() {
  return this.setSkillList([]);
};


/**
 * repeated TeamStadiumScoreBonus team_stadium_score_bonus = 8;
 * @return {!Array<!proto.hakuraku.TeamStadiumScoreBonus>}
 */
proto.hakuraku.UMDatabase.prototype.getTeamStadiumScoreBonusList = function() {
  return /** @type{!Array<!proto.hakuraku.TeamStadiumScoreBonus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.TeamStadiumScoreBonus, 8));
};


/**
 * @param {!Array<!proto.hakuraku.TeamStadiumScoreBonus>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setTeamStadiumScoreBonusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.hakuraku.TeamStadiumScoreBonus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.TeamStadiumScoreBonus}
 */
proto.hakuraku.UMDatabase.prototype.addTeamStadiumScoreBonus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.hakuraku.TeamStadiumScoreBonus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearTeamStadiumScoreBonusList = function() {
  return this.setTeamStadiumScoreBonusList([]);
};


/**
 * repeated Story story = 10;
 * @return {!Array<!proto.hakuraku.Story>}
 */
proto.hakuraku.UMDatabase.prototype.getStoryList = function() {
  return /** @type{!Array<!proto.hakuraku.Story>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.Story, 10));
};


/**
 * @param {!Array<!proto.hakuraku.Story>} value
 * @return {!proto.hakuraku.UMDatabase} returns this
*/
proto.hakuraku.UMDatabase.prototype.setStoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.hakuraku.Story=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.Story}
 */
proto.hakuraku.UMDatabase.prototype.addStory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.hakuraku.Story, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.UMDatabase} returns this
 */
proto.hakuraku.UMDatabase.prototype.clearStoryList = function() {
  return this.setStoryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.Chara.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.Chara.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.Chara} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Chara.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    castName: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.Chara}
 */
proto.hakuraku.Chara.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.Chara;
  return proto.hakuraku.Chara.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.Chara} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.Chara}
 */
proto.hakuraku.Chara.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCastName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.Chara.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.Chara.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.Chara} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Chara.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.Chara.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Chara.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.Chara.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Chara.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string cast_name = 3;
 * @return {string}
 */
proto.hakuraku.Chara.prototype.getCastName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.setCastName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Chara} returns this
 */
proto.hakuraku.Chara.prototype.clearCastName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Chara.prototype.hasCastName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.Card.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.Card.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.Card} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Card.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.Card}
 */
proto.hakuraku.Card.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.Card;
  return proto.hakuraku.Card.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.Card} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.Card}
 */
proto.hakuraku.Card.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.Card.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.Card.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.Card} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Card.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.Card.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.Card} returns this
 */
proto.hakuraku.Card.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Card} returns this
 */
proto.hakuraku.Card.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Card.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.Card.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.Card} returns this
 */
proto.hakuraku.Card.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Card} returns this
 */
proto.hakuraku.Card.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Card.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.SupportCard.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.SupportCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.SupportCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SupportCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    charaId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.SupportCard}
 */
proto.hakuraku.SupportCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.SupportCard;
  return proto.hakuraku.SupportCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.SupportCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.SupportCard}
 */
proto.hakuraku.SupportCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.SupportCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.SupportCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.SupportCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SupportCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.SupportCard.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SupportCard.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.SupportCard.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SupportCard.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 chara_id = 3;
 * @return {number}
 */
proto.hakuraku.SupportCard.prototype.getCharaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.setCharaId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SupportCard} returns this
 */
proto.hakuraku.SupportCard.prototype.clearCharaId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SupportCard.prototype.hasCharaId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.SuccessionRelation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.SuccessionRelation.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.SuccessionRelation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.SuccessionRelation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SuccessionRelation.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    relationPoint: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    memberList: jspb.Message.toObjectList(msg.getMemberList(),
    proto.hakuraku.SuccessionRelation.Member.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.SuccessionRelation}
 */
proto.hakuraku.SuccessionRelation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.SuccessionRelation;
  return proto.hakuraku.SuccessionRelation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.SuccessionRelation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.SuccessionRelation}
 */
proto.hakuraku.SuccessionRelation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelationType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelationPoint(value);
      break;
    case 3:
      var value = new proto.hakuraku.SuccessionRelation.Member;
      reader.readMessage(value,proto.hakuraku.SuccessionRelation.Member.deserializeBinaryFromReader);
      msg.addMember(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.SuccessionRelation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.SuccessionRelation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.SuccessionRelation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SuccessionRelation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMemberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.hakuraku.SuccessionRelation.Member.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.SuccessionRelation.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.SuccessionRelation.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SuccessionRelation.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    charaId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.SuccessionRelation.Member}
 */
proto.hakuraku.SuccessionRelation.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.SuccessionRelation.Member;
  return proto.hakuraku.SuccessionRelation.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.SuccessionRelation.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.SuccessionRelation.Member}
 */
proto.hakuraku.SuccessionRelation.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.SuccessionRelation.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.SuccessionRelation.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SuccessionRelation.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SuccessionRelation.Member} returns this
 */
proto.hakuraku.SuccessionRelation.Member.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SuccessionRelation.Member} returns this
 */
proto.hakuraku.SuccessionRelation.Member.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 chara_id = 2;
 * @return {number}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.getCharaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SuccessionRelation.Member} returns this
 */
proto.hakuraku.SuccessionRelation.Member.prototype.setCharaId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SuccessionRelation.Member} returns this
 */
proto.hakuraku.SuccessionRelation.Member.prototype.clearCharaId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SuccessionRelation.Member.prototype.hasCharaId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 relation_type = 1;
 * @return {number}
 */
proto.hakuraku.SuccessionRelation.prototype.getRelationType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SuccessionRelation} returns this
 */
proto.hakuraku.SuccessionRelation.prototype.setRelationType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SuccessionRelation} returns this
 */
proto.hakuraku.SuccessionRelation.prototype.clearRelationType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SuccessionRelation.prototype.hasRelationType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 relation_point = 2;
 * @return {number}
 */
proto.hakuraku.SuccessionRelation.prototype.getRelationPoint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SuccessionRelation} returns this
 */
proto.hakuraku.SuccessionRelation.prototype.setRelationPoint = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SuccessionRelation} returns this
 */
proto.hakuraku.SuccessionRelation.prototype.clearRelationPoint = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SuccessionRelation.prototype.hasRelationPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Member member = 3;
 * @return {!Array<!proto.hakuraku.SuccessionRelation.Member>}
 */
proto.hakuraku.SuccessionRelation.prototype.getMemberList = function() {
  return /** @type{!Array<!proto.hakuraku.SuccessionRelation.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hakuraku.SuccessionRelation.Member, 3));
};


/**
 * @param {!Array<!proto.hakuraku.SuccessionRelation.Member>} value
 * @return {!proto.hakuraku.SuccessionRelation} returns this
*/
proto.hakuraku.SuccessionRelation.prototype.setMemberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.hakuraku.SuccessionRelation.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.SuccessionRelation.Member}
 */
proto.hakuraku.SuccessionRelation.prototype.addMember = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.hakuraku.SuccessionRelation.Member, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.SuccessionRelation} returns this
 */
proto.hakuraku.SuccessionRelation.prototype.clearMemberList = function() {
  return this.setMemberList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.RaceInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.RaceInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.RaceInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    distance: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    groundType: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.RaceInstance}
 */
proto.hakuraku.RaceInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.RaceInstance;
  return proto.hakuraku.RaceInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.RaceInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.RaceInstance}
 */
proto.hakuraku.RaceInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 4:
      var value = /** @type {!proto.hakuraku.RaceInstance.GroundType} */ (reader.readEnum());
      msg.setGroundType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.RaceInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.RaceInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.RaceInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.RaceInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!proto.hakuraku.RaceInstance.GroundType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hakuraku.RaceInstance.GroundType = {
  UNKNOWN_GROUND_TYPE: 0,
  TURF: 1,
  DIRT: 2
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.RaceInstance.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceInstance.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.RaceInstance.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceInstance.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 distance = 3;
 * @return {number}
 */
proto.hakuraku.RaceInstance.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceInstance.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GroundType ground_type = 4;
 * @return {!proto.hakuraku.RaceInstance.GroundType}
 */
proto.hakuraku.RaceInstance.prototype.getGroundType = function() {
  return /** @type {!proto.hakuraku.RaceInstance.GroundType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.hakuraku.RaceInstance.GroundType} value
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.setGroundType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.RaceInstance} returns this
 */
proto.hakuraku.RaceInstance.prototype.clearGroundType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.RaceInstance.prototype.hasGroundType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.WinsSaddle.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.WinsSaddle.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.WinsSaddle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.WinsSaddle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.WinsSaddle.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    raceInstanceIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    priority: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    groupId: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.WinsSaddle}
 */
proto.hakuraku.WinsSaddle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.WinsSaddle;
  return proto.hakuraku.WinsSaddle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.WinsSaddle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.WinsSaddle}
 */
proto.hakuraku.WinsSaddle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRaceInstanceId(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.WinsSaddle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.WinsSaddle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.WinsSaddle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.WinsSaddle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRaceInstanceIdList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.WinsSaddle.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.WinsSaddle.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.WinsSaddle.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.WinsSaddle.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 race_instance_id = 3;
 * @return {!Array<number>}
 */
proto.hakuraku.WinsSaddle.prototype.getRaceInstanceIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.setRaceInstanceIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.addRaceInstanceId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.clearRaceInstanceIdList = function() {
  return this.setRaceInstanceIdList([]);
};


/**
 * optional int32 priority = 4;
 * @return {number}
 */
proto.hakuraku.WinsSaddle.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.setPriority = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.clearPriority = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.WinsSaddle.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 group_id = 5;
 * @return {number}
 */
proto.hakuraku.WinsSaddle.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.setGroupId = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.WinsSaddle} returns this
 */
proto.hakuraku.WinsSaddle.prototype.clearGroupId = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.WinsSaddle.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.SpecialCaseRace.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.SpecialCaseRace.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.SpecialCaseRace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.SpecialCaseRace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SpecialCaseRace.toObject = function(includeInstance, msg) {
  var f, obj = {
    raceInstanceId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    programGroup: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    racePermission: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    charaIdList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.SpecialCaseRace}
 */
proto.hakuraku.SpecialCaseRace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.SpecialCaseRace;
  return proto.hakuraku.SpecialCaseRace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.SpecialCaseRace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.SpecialCaseRace}
 */
proto.hakuraku.SpecialCaseRace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRaceInstanceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgramGroup(value);
      break;
    case 3:
      var value = /** @type {!proto.hakuraku.SpecialCaseRace.RacePermission} */ (reader.readEnum());
      msg.setRacePermission(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCharaId(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.SpecialCaseRace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.SpecialCaseRace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.SpecialCaseRace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.SpecialCaseRace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {!proto.hakuraku.SpecialCaseRace.RacePermission} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCharaIdList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.hakuraku.SpecialCaseRace.RacePermission = {
  UNKNOWN_RACE_PERMISSION: 0,
  FIRST_YEAR: 1,
  SECOND_YEAR: 2,
  SECOND_OR_THIRD_YEAR: 3,
  THIRD_YEAR: 4,
  EX: 5
};

/**
 * optional int32 race_instance_id = 1;
 * @return {number}
 */
proto.hakuraku.SpecialCaseRace.prototype.getRaceInstanceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.setRaceInstanceId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.clearRaceInstanceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SpecialCaseRace.prototype.hasRaceInstanceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 program_group = 2;
 * @return {number}
 */
proto.hakuraku.SpecialCaseRace.prototype.getProgramGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.setProgramGroup = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.clearProgramGroup = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SpecialCaseRace.prototype.hasProgramGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RacePermission race_permission = 3;
 * @return {!proto.hakuraku.SpecialCaseRace.RacePermission}
 */
proto.hakuraku.SpecialCaseRace.prototype.getRacePermission = function() {
  return /** @type {!proto.hakuraku.SpecialCaseRace.RacePermission} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.hakuraku.SpecialCaseRace.RacePermission} value
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.setRacePermission = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.clearRacePermission = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.SpecialCaseRace.prototype.hasRacePermission = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated int32 chara_id = 4;
 * @return {!Array<number>}
 */
proto.hakuraku.SpecialCaseRace.prototype.getCharaIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.setCharaIdList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.addCharaId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.SpecialCaseRace} returns this
 */
proto.hakuraku.SpecialCaseRace.prototype.clearCharaIdList = function() {
  return this.setCharaIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hakuraku.Skill.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    gradeValue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tagIdList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.Skill}
 */
proto.hakuraku.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.Skill;
  return proto.hakuraku.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.Skill}
 */
proto.hakuraku.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGradeValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTagId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getTagIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.Skill.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Skill.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.Skill.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Skill.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 grade_value = 3;
 * @return {number}
 */
proto.hakuraku.Skill.prototype.getGradeValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.setGradeValue = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.clearGradeValue = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Skill.prototype.hasGradeValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string tag_id = 4;
 * @return {!Array<string>}
 */
proto.hakuraku.Skill.prototype.getTagIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.setTagIdList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.addTagId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hakuraku.Skill} returns this
 */
proto.hakuraku.Skill.prototype.clearTagIdList = function() {
  return this.setTagIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.TeamStadiumScoreBonus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.TeamStadiumScoreBonus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.TeamStadiumScoreBonus.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.TeamStadiumScoreBonus}
 */
proto.hakuraku.TeamStadiumScoreBonus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.TeamStadiumScoreBonus;
  return proto.hakuraku.TeamStadiumScoreBonus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.TeamStadiumScoreBonus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.TeamStadiumScoreBonus}
 */
proto.hakuraku.TeamStadiumScoreBonus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.TeamStadiumScoreBonus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.TeamStadiumScoreBonus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.TeamStadiumScoreBonus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.TeamStadiumScoreBonus} returns this
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.TeamStadiumScoreBonus} returns this
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.TeamStadiumScoreBonus} returns this
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.TeamStadiumScoreBonus} returns this
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.TeamStadiumScoreBonus.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hakuraku.Story.prototype.toObject = function(opt_includeInstance) {
  return proto.hakuraku.Story.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hakuraku.Story} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Story.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hakuraku.Story}
 */
proto.hakuraku.Story.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hakuraku.Story;
  return proto.hakuraku.Story.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hakuraku.Story} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hakuraku.Story}
 */
proto.hakuraku.Story.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hakuraku.Story.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hakuraku.Story.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hakuraku.Story} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hakuraku.Story.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.hakuraku.Story.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hakuraku.Story} returns this
 */
proto.hakuraku.Story.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Story} returns this
 */
proto.hakuraku.Story.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Story.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.hakuraku.Story.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hakuraku.Story} returns this
 */
proto.hakuraku.Story.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.hakuraku.Story} returns this
 */
proto.hakuraku.Story.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hakuraku.Story.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.hakuraku);
